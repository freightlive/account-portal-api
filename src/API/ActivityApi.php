<?php
/**
 * ActivityApi
 * PHP version 5
 *
 * @category Class
 * @package  BumbalAccountPortal
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Account Portal API
 *
 * Bumbal Account API documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalAccountPortal\API;

use \BumbalAccountPortal\ApiClient;
use \BumbalAccountPortal\ApiException;
use \BumbalAccountPortal\Configuration;
use \BumbalAccountPortal\ObjectSerializer;

/**
 * ActivityApi Class Doc Comment
 *
 * @category Class
 * @package  BumbalAccountPortal
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActivityApi
{
    /**
     * API Client
     *
     * @var \BumbalAccountPortal\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BumbalAccountPortal\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\BumbalAccountPortal\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \BumbalAccountPortal\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \BumbalAccountPortal\ApiClient $apiClient set the API client
     *
     * @return ActivityApi
     */
    public function setApiClient(\BumbalAccountPortal\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteActivity
     *
     * Delete an activity
     *
     * @param int $activity_id ID of the activity to delete (required)
     * @throws \BumbalAccountPortal\ApiException on non-2xx response
     * @return \BumbalAccountPortal\Model\ApiResponse
     */
    public function deleteActivity($activity_id)
    {
        list($response) = $this->deleteActivityWithHttpInfo($activity_id);
        return $response;
    }

    /**
     * Operation deleteActivityWithHttpInfo
     *
     * Delete an activity
     *
     * @param int $activity_id ID of the activity to delete (required)
     * @throws \BumbalAccountPortal\ApiException on non-2xx response
     * @return array of \BumbalAccountPortal\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteActivityWithHttpInfo($activity_id)
    {
        // verify the required parameter 'activity_id' is set
        if ($activity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $activity_id when calling deleteActivity');
        }
        // parse inputs
        $resourcePath = "/activity/{activityId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($activity_id !== null) {
            $resourcePath = str_replace(
                "{" . "activityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($activity_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalAccountPortal\Model\ApiResponse',
                '/activity/{activityId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalAccountPortal\Model\ApiResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalAccountPortal\Model\ApiResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retrieveActivity
     *
     * Find activity by ID
     *
     * @param int $activity_id ID of activity to return (required)
     * @throws \BumbalAccountPortal\ApiException on non-2xx response
     * @return \BumbalAccountPortal\Model\ActivityModel
     */
    public function retrieveActivity($activity_id)
    {
        list($response) = $this->retrieveActivityWithHttpInfo($activity_id);
        return $response;
    }

    /**
     * Operation retrieveActivityWithHttpInfo
     *
     * Find activity by ID
     *
     * @param int $activity_id ID of activity to return (required)
     * @throws \BumbalAccountPortal\ApiException on non-2xx response
     * @return array of \BumbalAccountPortal\Model\ActivityModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveActivityWithHttpInfo($activity_id)
    {
        // verify the required parameter 'activity_id' is set
        if ($activity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $activity_id when calling retrieveActivity');
        }
        // parse inputs
        $resourcePath = "/activity/{activityId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($activity_id !== null) {
            $resourcePath = str_replace(
                "{" . "activityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($activity_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalAccountPortal\Model\ActivityModel',
                '/activity/{activityId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalAccountPortal\Model\ActivityModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalAccountPortal\Model\ActivityModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setActivity
     *
     * Set an activity
     *
     * @param \BumbalAccountPortal\Model\ActivityModel $body Activity object (optional)
     * @throws \BumbalAccountPortal\ApiException on non-2xx response
     * @return \BumbalAccountPortal\Model\ApiResponse
     */
    public function setActivity($body = null)
    {
        list($response) = $this->setActivityWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation setActivityWithHttpInfo
     *
     * Set an activity
     *
     * @param \BumbalAccountPortal\Model\ActivityModel $body Activity object (optional)
     * @throws \BumbalAccountPortal\ApiException on non-2xx response
     * @return array of \BumbalAccountPortal\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setActivityWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/activity/set";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalAccountPortal\Model\ApiResponse',
                '/activity/set'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalAccountPortal\Model\ApiResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalAccountPortal\Model\ApiResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
